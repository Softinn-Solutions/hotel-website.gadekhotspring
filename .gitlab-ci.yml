stages:
 - build
 - test

variables:
 IMAGE_NAME: ${CI_REGISTRY_IMAGE}
 GIT_STRATEGY: clone

build:
 image: docker:latest
 only:
  - master
 before_script:
  - chmod +x ./function.sh
  - . function.sh
  - get_image_tag
  - echo $TAG
  - docker login registry.gitlab.com -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
 script:
  - cd EmbunLuxuryVillas
  - docker build -t $IMAGE_NAME:$TAG . --build-arg PAT=$AZURE_PAT
  - docker push $IMAGE_NAME:$TAG
 after_script:
  - chmod +x ./function.sh
  - . function.sh
  - get_image_tag
  - docker rmi -f $IMAGE_NAME:$TAG
  - docker logout ${CI_REGISTRY}
 stage: build
 tags:
  - docker

test:
 image: docker:latest
 services:
  - mcr.microsoft.com/dotnet/sdk:3.1
 only:
  - master
 stage: test
 before_script:
  - chmod +x ./function.sh
  - . function.sh
  - get_image_tag
  - echo $TAG
  - docker login registry.gitlab.com -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}
 script:
  - docker pull $IMAGE_NAME:$TAG
  - docker run -d -p 3020 --name aspwebcore $IMAGE_NAME:$TAG -it
  - docker ps
 after_script:
  - chmod +x ./function.sh
  - . function.sh
  - get_image_tag
  - docker kill aspwebcore
  - docker rm -f aspwebcore || true
  - docker rmi -f $IMAGE_NAME:$TAG
  - docker logout ${CI_REGISTRY}